{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stepList","input_expression","input_data","invalid_input","theorems","name","left","right","length","e","_this2","preventDefault","setState","axios","post","old_expression","getOldExpression","new_expression","then","res","console","log","data","concat","toConsumableArray","catch","target","value","containerStyle","display","react_default","a","createElement","className","map","item","style","type","onChange","set_input_expression","bind","onClick","validate","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yNCqGzBC,cA7Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,GACVC,iBAAkB,oCAClBC,WAAY,uBACZC,eAAe,EACfC,SAAU,CAAC,CACTC,KAAM,sBACNC,KAAM,8BACNC,MAAO,6CAET,CACEF,KAAM,wBACNC,KAAM,8BACNC,MAAO,2DAET,CACEF,KAAM,0BACNC,KAAM,8BACNC,MAAO,8EApBMf,kFA2BjB,IAAMQ,EAAWL,KAAKI,MAAMC,SAC5B,OAAuB,GAAnBA,EAASQ,OACJb,KAAKI,MAAMG,WAEXF,EAASA,EAASQ,OAAS,oCAK7BC,GAAG,IAAAC,EAAAf,KACVc,EAAEE,iBACFhB,KAAKiB,SAAS,CAACT,eAAe,IAC9BU,IAAMC,KAAK,YAAa,CACtBC,eAAgBpB,KAAKqB,mBACrBC,eAAgBtB,KAAKI,MAAME,iBAC3BG,SAAUT,KAAKI,MAAMK,WACpBc,KAAK,SAAAC,GACNC,QAAQC,IAAIF,GACRA,EAAIG,KACNZ,EAAKE,SAAS,CACZZ,SAAQ,GAAAuB,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAMiB,EAAKX,MAAMC,UAAjB,CAA2BU,EAAKX,MAAME,sBAGhDmB,QAAQC,IAAI,mBACZX,EAAKE,SAAS,CAACT,eAAe,OAG/BsB,MAAML,QAAQC,kDAGEZ,GACnBA,EAAEE,iBACFhB,KAAKiB,SAAS,CACZX,iBAAkBQ,EAAEiB,OAAOC,yCAK7B,IAAMC,EAAiB,CACrBC,QAAS,UAEX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,aAAKrC,KAAKI,MAAMG,WAAhB,KAECP,KAAKI,MAAMC,SAASkC,IAAI,SAAAC,GACvB,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaG,MAAOR,GACxCE,EAAAC,EAAAC,cAAA,iBAASG,GADJ,IACiBL,EAAAC,EAAAC,cAAA,uBAI1BF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBG,MAAOR,GACzCE,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOV,MAAOhC,KAAKI,MAAME,iBAAkBqC,SAAW3C,KAAK4C,qBAAqBC,KAAK7C,QADnG,IACoHmC,EAAAC,EAAAC,cAAA,UAAQS,QAAS9C,KAAK+C,SAASF,KAAK7C,OAApC,KAChHA,KAAKI,MAAMI,cAAe2B,EAAAC,EAAAC,cAAA,wCAAwC,aArF9DW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.a8791214.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepList: [],\n      input_expression: \"Derivative(x,x) + Derivative(x,x)\",\n      input_data: \"Derivative(x + x ,x)\",\n      invalid_input: false, \n      theorems: [{\n        name: \"derivada de la suma\",\n        left: \"Derivative(f(x) + g(x) , x)\",\n        right: \"Derivative(f(x), x) + Derivative(g(x), x)\"\n      },\n      {\n        name: \"derivada del producto\",\n        left: \"Derivative(f(x) * g(x) , x)\",\n        right: \"Derivative(f(x), x) * g(x) + Derivative(g(x), x) * f(x)\"\n      },\n      {\n        name: \"derivada de la division\",\n        left: \"Derivative(f(x) / g(x) , x)\",\n        right: \"Derivative(( f(x), x) * g(x) - Derivative(g(x), x) * f(x)) / ( g(x)** 2)\"\n      }\n      ]\n    }\n  }\n\n  getOldExpression() {\n    const stepList = this.state.stepList;\n    if (stepList.length == 0) {\n      return this.state.input_data;\n    } else {\n      return stepList[stepList.length - 1];\n    }\n  }\n\n\n  validate(e) {\n    e.preventDefault();\n    this.setState({invalid_input: false})\n    axios.post('/validate', {\n      old_expression: this.getOldExpression(),\n      new_expression: this.state.input_expression,\n      theorems: this.state.theorems\n    }).then(res => {\n      console.log(res);\n      if (res.data) {\n        this.setState({\n          stepList: [...this.state.stepList, this.state.input_expression]\n        });\n      } else {\n        console.log(\"Invalid request\");\n        this.setState({invalid_input: true})\n      }\n      \n    }).catch(console.log);\n  }\n\n  set_input_expression(e) {\n    e.preventDefault();\n    this.setState({\n      input_expression: e.target.value\n    })\n  }\n\n  render() {\n    const containerStyle = {\n      display: 'inline'\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>MATH LEARNING</h1>\n          <h2>Calcule paso a paso la siguiente derivada</h2>\n          <p> {this.state.input_data} </p>\n\n          {this.state.stepList.map(item => {\n            return <div className=\"valid-step\" style={containerStyle}>\n              <span>= {item}</span> <span>tick</span>\n            </div>\n          })}\n\n          <div className=\"add-step-container\" style={containerStyle}>\n            <input type='text' value={this.state.input_expression} onChange={ this.set_input_expression.bind(this) }></input> <button onClick={this.validate.bind(this)}>+</button>\n            { this.state.invalid_input ?<span>this.state.invalid_input</span> : \"\"}\n          </div>\n\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}